/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.muni.fi.pv168.frontend;

import cz.muni.fi.pv168.Category;
import cz.muni.fi.pv168.Event;
import cz.muni.fi.pv168.User;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutionException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingWorker;
import org.jdesktop.swingx.JXDatePicker;
import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 *
 * @author Dadka
 */
public class FilterForm extends javax.swing.JFrame {

    private final static Logger log = LoggerFactory.getLogger(UserForm.class);
    private ResourceBundle rb = ResourceBundle.getBundle("texts");
    private CalendarGUI context;
    private User user;
    private String action;
    
    private DefaultComboBoxModel categoryComboBoxModel = new DefaultComboBoxModel<>(Category.values());
    
    private JXDatePicker startDateDtp;
    private JSpinner startDateSpinner;
    private JSpinner endDateSpinner;
    private JXDatePicker endDateDtp;
    /**
     * Creates new form FilterForm
     */
    public FilterForm() {
        initComponents();
    }

    public FilterForm(CalendarGUI context, String selectedEmail) {
        initComponents();
        context.setEnabled(false);
        this.context = context;
                
        if(selectedEmail != null && !selectedEmail.isEmpty()){   
            log.debug("FilterForm contructor getting user by email " + selectedEmail);
            this.user = context.getUserManager().getUserByEmail(selectedEmail);
            log.debug("FilterForm got user by email");
        }
        
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setVisible(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelFilteryBy = new javax.swing.JLabel();
        jTextFieldFilterByName = new javax.swing.JTextField();
        jComboBoxCategory = new javax.swing.JComboBox<>();
        jPanelStartDate = new javax.swing.JPanel();
        jPanelEndDate = new javax.swing.JPanel();
        jLabelCategory2 = new javax.swing.JLabel();
        jLabelCategory3 = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jCheckBoxName = new javax.swing.JCheckBox();
        jCheckBoxCategory = new javax.swing.JCheckBox();
        jCheckBoxDate = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabelFilteryBy.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("texts"); // NOI18N
        jLabelFilteryBy.setText(bundle.getString("FilterBy")); // NOI18N

        jComboBoxCategory.setModel(categoryComboBoxModel);

        jPanelStartDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanelStartDateLayout = new javax.swing.GroupLayout(jPanelStartDate);
        jPanelStartDate.setLayout(jPanelStartDateLayout);
        jPanelStartDateLayout.setHorizontalGroup(
            jPanelStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 321, Short.MAX_VALUE)
        );
        jPanelStartDateLayout.setVerticalGroup(
            jPanelStartDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jPanelEndDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanelEndDateLayout = new javax.swing.GroupLayout(jPanelEndDate);
        jPanelEndDate.setLayout(jPanelEndDateLayout);
        jPanelEndDateLayout.setHorizontalGroup(
            jPanelEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 321, Short.MAX_VALUE)
        );
        jPanelEndDateLayout.setVerticalGroup(
            jPanelEndDateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jLabelCategory2.setText(bundle.getString("from")); // NOI18N

        jLabelCategory3.setText(bundle.getString("to")); // NOI18N

        jButtonCancel.setText("Cancel");
        jButtonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCancelMouseClicked(evt);
            }
        });

        jButtonOK.setText("Ok");
        jButtonOK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOKMouseClicked(evt);
            }
        });

        jCheckBoxName.setText(bundle.getString("Name")); // NOI18N

        jCheckBoxCategory.setText(bundle.getString("Category")); // NOI18N

        jCheckBoxDate.setText(bundle.getString("Date")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxName)
                            .addComponent(jCheckBoxCategory)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBoxDate)
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelCategory3)
                                    .addComponent(jLabelCategory2))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelEndDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanelStartDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldFilterByName))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelFilteryBy)
                        .addGap(58, 58, 58))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 349, Short.MAX_VALUE)
                .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabelFilteryBy)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldFilterByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxName))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxCategory))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxDate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCategory2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelCategory3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        Date startDate = new Date();
        startDateDtp = new JXDatePicker();
        startDateDtp.setDate(startDate);
        startDateDtp.setBounds(0, 0, 200, 30);
        jPanelStartDate.add(startDateDtp);

        SpinnerDateModel startDateSm = new SpinnerDateModel(startDate, null, null, Calendar.MINUTE);
        startDateSpinner = new JSpinner(startDateSm);
        JSpinner.DateEditor startDateDe = new JSpinner.DateEditor(startDateSpinner, "HH:mm");
        startDateDe.getTextField().setEditable( false );
        startDateSpinner.setEditor(startDateDe);
        startDateSpinner.setBounds(210, 0, 100, 30);
        jPanelStartDate.add(startDateSpinner);
        Date endDate = new Date();
        Calendar cal = Calendar.getInstance();
        cal.setTime(endDate);
        cal.add(Calendar.HOUR_OF_DAY, 1);
        endDate = cal.getTime();

        endDateDtp = new JXDatePicker();
        endDateDtp.setDate(endDate);
        endDateDtp.setBounds(0, 0, 200, 30);
        jPanelEndDate.add(endDateDtp);

        SpinnerDateModel endDateSm = new SpinnerDateModel(endDate, null, null, Calendar.MINUTE);
        endDateSpinner = new JSpinner(endDateSm);
        JSpinner.DateEditor endDateDe = new JSpinner.DateEditor(endDateSpinner, "HH:mm");
        endDateDe.getTextField().setEditable( false );
        endDateSpinner.setEditor(endDateDe);
        endDateSpinner.setBounds(210, 0, 100, 30);
        jPanelEndDate.add(endDateSpinner);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCancelMouseClicked
        this.dispose();
    }//GEN-LAST:event_jButtonCancelMouseClicked

    private void jButtonOKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOKMouseClicked
        
        FilterEventsrWorker worker = new FilterEventsrWorker();
        worker.execute();
        this.dispose();
    }//GEN-LAST:event_jButtonOKMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        context.setEnabled(true);
    }//GEN-LAST:event_formWindowClosed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilterForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JCheckBox jCheckBoxCategory;
    private javax.swing.JCheckBox jCheckBoxDate;
    private javax.swing.JCheckBox jCheckBoxName;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JLabel jLabelCategory2;
    private javax.swing.JLabel jLabelCategory3;
    private javax.swing.JLabel jLabelFilteryBy;
    private javax.swing.JPanel jPanelEndDate;
    private javax.swing.JPanel jPanelStartDate;
    private javax.swing.JTextField jTextFieldFilterByName;
    // End of variables declaration//GEN-END:variables

public class FilterEventsrWorker extends SwingWorker<List<Event>, Integer>{
        
        @Override
        protected List<Event> doInBackground() throws Exception {
            
            List<Event> eventList;
            if(user != null) {
                eventList = context.getEventManager().listUserEvents(user.getId());
            } else {
                eventList = context.getEventManager().listAllEvents();
            }
            
            if(jCheckBoxName.isSelected()) {
                eventList = context.getEventManager().filterEventByName(eventList, jTextFieldFilterByName.getText());
            }
            if(jCheckBoxCategory.isSelected()) {
                eventList = context.getEventManager().filterEventByCategory(eventList,  (Category) jComboBoxCategory.getSelectedItem());
            }
            if(jCheckBoxDate.isSelected()) {
                DateTime startDate = new DateTime(startDateDtp.getDate());
                DateTime startDateTime = new DateTime(startDateSpinner.getValue());
                LocalDateTime startTime = LocalDateTime.of(startDate.getYear(), startDate.getMonthOfYear(), startDate.getDayOfMonth(), startDateTime.getHourOfDay(), startDateTime.getMinuteOfHour(), startDateTime.getSecondOfMinute());
                log.debug("SpinnerDateModel: " + startDateTime);

                DateTime endDate = new DateTime(endDateDtp.getDate());
                DateTime endDateTime = new DateTime(endDateSpinner.getValue());
                LocalDateTime endTime = LocalDateTime.of(endDate.getYear(), endDate.getMonthOfYear(), endDate.getDayOfMonth(), endDateTime.getHourOfDay(), endDateTime.getMinuteOfHour(), endDateTime.getSecondOfMinute());
                log.debug("SpinnerDateModel: " + endDateTime);
                
                eventList = context.getEventManager().filterEventByDate(eventList, startTime, endTime);

                //todo
            }
           return eventList;
        }
        
        @Override
        protected void done(){
             try{
                 List<Event> filteredEventList = get();

                 context.getEventTableModel().clearEvents();
                 context.getEventTableModel().setEvents(filteredEventList);
                 
            }catch(ExecutionException ex) {
                log.error("Exception was thrown in FilterEventsrWorker in method doInBackGround " + ex.getCause());
            } catch (InterruptedException ex) {
                log.error("Method doInBackground has been interrupted in FilterEventsrWorker " + ex.getCause());
                throw new RuntimeException("Operation interrupted in FilterEventsrWorker");
            }
        }
    }
}
